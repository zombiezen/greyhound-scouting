// code128.go

package barcode

import (
	"unicode"
)

var weights = [...][]uint8{
	{2, 1, 2, 2, 2, 2},
	{2, 2, 2, 1, 2, 2},
	{2, 2, 2, 2, 2, 1},
	{1, 2, 1, 2, 2, 3},
	{1, 2, 1, 3, 2, 2},
	{1, 3, 1, 2, 2, 2},
	{1, 2, 2, 2, 1, 3},
	{1, 2, 2, 3, 1, 2},
	{1, 3, 2, 2, 1, 2},
	{2, 2, 1, 2, 1, 3},
	{2, 2, 1, 3, 1, 2},
	{2, 3, 1, 2, 1, 2},
	{1, 1, 2, 2, 3, 2},
	{1, 2, 2, 1, 3, 2},
	{1, 2, 2, 2, 3, 1},
	{1, 1, 3, 2, 2, 2},
	{1, 2, 3, 1, 2, 2},
	{1, 2, 3, 2, 2, 1},
	{2, 2, 3, 2, 1, 1},
	{2, 2, 1, 1, 3, 2},
	{2, 2, 1, 2, 3, 1},
	{2, 1, 3, 2, 1, 2},
	{2, 2, 3, 1, 1, 2},
	{3, 1, 2, 1, 3, 1},
	{3, 1, 1, 2, 2, 2},
	{3, 2, 1, 1, 2, 2},
	{3, 2, 1, 2, 2, 1},
	{3, 1, 2, 2, 1, 2},
	{3, 2, 2, 1, 1, 2},
	{3, 2, 2, 2, 1, 1},
	{2, 1, 2, 1, 2, 3},
	{2, 1, 2, 3, 2, 1},
	{2, 3, 2, 1, 2, 1},
	{1, 1, 1, 3, 2, 3},
	{1, 3, 1, 1, 2, 3},
	{1, 3, 1, 3, 2, 1},
	{1, 1, 2, 3, 1, 3},
	{1, 3, 2, 1, 1, 3},
	{1, 3, 2, 3, 1, 1},
	{2, 1, 1, 3, 1, 3},
	{2, 3, 1, 1, 1, 3},
	{2, 3, 1, 3, 1, 1},
	{1, 1, 2, 1, 3, 3},
	{1, 1, 2, 3, 3, 1},
	{1, 3, 2, 1, 3, 1},
	{1, 1, 3, 1, 2, 3},
	{1, 1, 3, 3, 2, 1},
	{1, 3, 3, 1, 2, 1},
	{3, 1, 3, 1, 2, 1},
	{2, 1, 1, 3, 3, 1},
	{2, 3, 1, 1, 3, 1},
	{2, 1, 3, 1, 1, 3},
	{2, 1, 3, 3, 1, 1},
	{2, 1, 3, 1, 3, 1},
	{3, 1, 1, 1, 2, 3},
	{3, 1, 1, 3, 2, 1},
	{3, 3, 1, 1, 2, 1},
	{3, 1, 2, 1, 1, 3},
	{3, 1, 2, 3, 1, 1},
	{3, 3, 2, 1, 1, 1},
	{3, 1, 4, 1, 1, 1},
	{2, 2, 1, 4, 1, 1},
	{4, 3, 1, 1, 1, 1},
	{1, 1, 1, 2, 2, 4},
	{1, 1, 1, 4, 2, 2},
	{1, 2, 1, 1, 2, 4},
	{1, 2, 1, 4, 2, 1},
	{1, 4, 1, 1, 2, 2},
	{1, 4, 1, 2, 2, 1},
	{1, 1, 2, 2, 1, 4},
	{1, 1, 2, 4, 1, 2},
	{1, 2, 2, 1, 1, 4},
	{1, 2, 2, 4, 1, 1},
	{1, 4, 2, 1, 1, 2},
	{1, 4, 2, 2, 1, 1},
	{2, 4, 1, 2, 1, 1},
	{2, 2, 1, 1, 1, 4},
	{4, 1, 3, 1, 1, 1},
	{2, 4, 1, 1, 1, 2},
	{1, 3, 4, 1, 1, 1},
	{1, 1, 1, 2, 4, 2},
	{1, 2, 1, 1, 4, 2},
	{1, 2, 1, 2, 4, 1},
	{1, 1, 4, 2, 1, 2},
	{1, 2, 4, 1, 1, 2},
	{1, 2, 4, 2, 1, 1},
	{4, 1, 1, 2, 1, 2},
	{4, 2, 1, 1, 1, 2},
	{4, 2, 1, 2, 1, 1},
	{2, 1, 2, 1, 4, 1},
	{2, 1, 4, 1, 2, 1},
	{4, 1, 2, 1, 2, 1},
	{1, 1, 1, 1, 4, 3},
	{1, 1, 1, 3, 4, 1},
	{1, 3, 1, 1, 4, 1},
	{1, 1, 4, 1, 1, 3},
	{1, 1, 4, 3, 1, 1},
	{4, 1, 1, 1, 1, 3},
	{4, 1, 1, 3, 1, 1},
	{1, 1, 3, 1, 4, 1},
	{1, 1, 4, 1, 3, 1},
	{3, 1, 1, 1, 4, 1},
	{4, 1, 1, 1, 3, 1},
	{2, 1, 1, 4, 1, 2},
	{2, 1, 1, 2, 1, 4},
	{2, 1, 1, 2, 3, 2},
	{2, 3, 3, 1, 1, 1, 2},
}

const (
	fnc1   = 102
	startA = 103
	startB = 104
	startC = 105
	stop   = 106
)

var charsetA = map[string]int{
	" ": 0, "!": 1, "\"": 2, "#": 3, "$": 4, "%": 5, "&": 6, "'": 7,
	"(": 8, ")": 9, "*": 10, "+": 11, ",": 12, "-": 13, ".": 14, "/": 15,
	"0": 16, "1": 17, "2": 18, "3": 19, "4": 20, "5": 21, "6": 22, "7": 23,
	"8": 24, "9": 25, ":": 26, ";": 27, "<": 28, "=": 29, ">": 30, "?": 31,
	"@": 32, "A": 33, "B": 34, "C": 35, "D": 36, "E": 37, "F": 38, "G": 39,
	"H": 40, "I": 41, "J": 42, "K": 43, "L": 44, "M": 45, "N": 46, "O": 47,
	"P": 48, "Q": 49, "R": 50, "S": 51, "T": 52, "U": 53, "V": 54, "W": 55,
	"X": 56, "Y": 57, "Z": 58, "[": 59, "\\": 60, "]": 61, "^": 62, "_": 63,
	"\x00": 64, "\x01": 65, "\x02": 66, "\x03": 67, "\x04": 68, "\x05": 69, "\x06": 70, "\x07": 71,
	"\x08": 72, "\x09": 73, "\x0A": 74, "\x0B": 75, "\x0C": 76, "\x0D": 77, "\x0E": 78, "\x0F": 79,
	"\x10": 80, "\x11": 81, "\x12": 82, "\x13": 83, "\x14": 84, "\x15": 85, "\x16": 86, "\x17": 87,
	"\x18": 88, "\x19": 89, "\x1A": 90, "\x1B": 91, "\x1C": 92, "\x1D": 93, "\x1E": 94, "\x1F": 95,
	"FNC3": 96, "FNC2": 97, "SHIFT": 98, "Code C": 99, "Code B": 100, "FNC4": 101,
}
var charsetB = map[string]int{
	" ": 0, "!": 1, "\"": 2, "#": 3, "$": 4, "%": 5, "&": 6, "'": 7,
	"(": 8, ")": 9, "*": 10, "+": 11, ",": 12, "-": 13, ".": 14, "/": 15,
	"0": 16, "1": 17, "2": 18, "3": 19, "4": 20, "5": 21, "6": 22, "7": 23,
	"8": 24, "9": 25, ":": 26, ";": 27, "<": 28, "=": 29, ">": 30, "?": 31,
	"@": 32, "A": 33, "B": 34, "C": 35, "D": 36, "E": 37, "F": 38, "G": 39,
	"H": 40, "I": 41, "J": 42, "K": 43, "L": 44, "M": 45, "N": 46, "O": 47,
	"P": 48, "Q": 49, "R": 50, "S": 51, "T": 52, "U": 53, "V": 54, "W": 55,
	"X": 56, "Y": 57, "Z": 58, "[": 59, "\\": 60, "]": 61, "^": 62, "_": 63,
	"": 64, "a": 65, "b": 66, "c": 67, "d": 68, "e": 69, "f": 70, "g": 71,
	"h": 72, "i": 73, "j": 74, "k": 75, "l": 76, "m": 77, "n": 78, "o": 79,
	"p": 80, "q": 81, "r": 82, "s": 83, "t": 84, "u": 85, "v": 86, "w": 87,
	"x": 88, "y": 89, "z": 90, "{": 91, "|": 92, "}": 93, "~": 94, "\x7F": 95,
	"FNC3": 96, "FNC2": 97, "SHIFT": 98, "Code C": 99, "FNC4": 100, "Code A": 101,
}
var charsetC = map[string]int{
	"00": 0, "01": 1, "02": 2, "03": 3, "04": 4, "05": 5, "06": 6, "07": 7,
	"08": 8, "09": 9, "10": 10, "11": 11, "12": 12, "13": 13, "14": 14, "15": 15,
	"16": 16, "17": 17, "18": 18, "19": 19, "20": 20, "21": 21, "22": 22, "23": 23,
	"24": 24, "25": 25, "26": 26, "27": 27, "28": 28, "29": 29, "30": 30, "31": 31,
	"32": 32, "33": 33, "34": 34, "35": 35, "36": 36, "37": 37, "38": 38, "39": 39,
	"40": 40, "41": 41, "42": 42, "43": 43, "44": 44, "45": 45, "46": 46, "47": 47,
	"48": 48, "49": 49, "50": 50, "51": 51, "52": 52, "53": 53, "54": 54, "55": 55,
	"56": 56, "57": 57, "58": 58, "59": 59, "60": 60, "61": 61, "62": 62, "63": 63,
	"64": 64, "65": 65, "66": 66, "67": 67, "68": 68, "69": 69, "70": 70, "71": 71,
	"72": 72, "73": 73, "74": 74, "75": 75, "76": 76, "77": 77, "78": 78, "79": 79,
	"80": 80, "81": 81, "82": 82, "83": 83, "84": 84, "85": 85, "86": 86, "87": 87,
	"88": 88, "89": 89, "90": 90, "91": 91, "92": 92, "93": 93, "94": 94, "95": 95,
	"96": 96, "97": 97, "98": 98, "99": 99, "Code B": 100, "Code A": 101,
}

func isDigit(s string) bool {
	for _, rune := range s {
		if !unicode.IsDigit(rune) {
			return false
		}
	}
	return true
}

func getBits(i int) (b []bool) {
	weight := weights[i]
	for i, w := range weight {
		for j := 0; j < int(w); j++ {
			b = append(b, i%2 == 0)
		}
	}
	return
}

func hasKey(cs map[string]int, key string) (present bool) {
	_, present = cs[key]
	return
}

func Encode(s string) (code Barcode) {
	const (
		A = iota
		B
		C
	)

	var charset = -1
	var charsetMap map[string]int
	var pos, sum int

	add := func(i int) {
		code = append(code, getBits(i)...)
		if pos > 0 {
			sum = (sum + pos*i) % 103
		} else {
			sum = i
		}
		pos++
	}

	for i := 0; i < len(s); i++ {
		c := s[i]

		switch {
		// Only switch to charset C if next 4 characters are digits
		case (len(s)-i >= 4 && isDigit(s[i:i+4]) && charset != C) || (len(s)-i >= 2 && isDigit(s[i:i+2]) && charset == C):
			if charset != C {
				if pos > 0 {
					add(charsetMap["Code C"])
				} else {
					add(startC)
				}
				charset, charsetMap = C, charsetC
			}
		case hasKey(charsetB, string(c)) && charset != B && !(hasKey(charsetA, string(c)) && charset == A):
			if pos > 0 {
				add(charsetMap["Code B"])
			} else {
				add(startB)
			}
			charset, charsetMap = B, charsetB
		case hasKey(charsetA, string(c)) && charset != A && !(hasKey(charsetB, string(c)) && charset == B):
			if pos > 0 {
				add(charsetMap["Code A"])
			} else {
				add(startA)
			}
			charset, charsetMap = A, charsetA
		}

		var val int
		if charset == C {
			val = charsetMap[s[i:i+2]]
			i++
		} else {
			val = charsetMap[string(c)]
		}
		add(val)
	}

	add(sum)
	add(stop)

	return
}
